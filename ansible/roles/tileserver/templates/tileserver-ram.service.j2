[Unit]
Description=Tileserver-GL (serving MBTiles from RAM disk)
After=network.target tileserver-ram-sync.service{% if tileserver_deploy_method == 'docker' %} docker.service{% endif %}
{% if tileserver_deploy_method == 'docker' %}Requires=docker.service
{% endif %}

[Service]
Type=simple
{% if tileserver_deploy_method == 'docker' %}User=root
Group=root
{% else %}User={{ tileserver_user }}
Group={{ tileserver_user }}
{% endif %}
# Ensure MBTiles are copied into RAM disk before start
ExecStartPre=/usr/bin/rsync -a {{ persistent_mbtiles_dir }}/ {{ ramdisk_mount_point }}/
{% if tileserver_deploy_method == 'docker' %}ExecStartPre=-/usr/bin/docker rm -f tileserver-gl
ExecStart=/usr/bin/docker run --name tileserver-gl --pull=always --rm --publish {{ tileserver_docker_bind_address }}:{{ tileserver_port }}:{{ tileserver_port }} --volume {{ ramdisk_mount_point }}:/data:ro{% if tileserver_docker_extra_args %} {{ tileserver_docker_extra_args | join(' ') }}{% endif %} {{ tileserver_docker_image }} --port {{ tileserver_port }} /data
ExecStop=/usr/bin/docker stop tileserver-gl
{% else %}# Start tileserver-gl serving whatever MBTiles are in the RAM disk
ExecStart=/usr/bin/tileserver-gl --port {{ tileserver_port }} {{ ramdisk_mount_point }}
{% endif %}
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
